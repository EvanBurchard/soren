module Soren
  def nil_returner
    if super().nil?
      return NullObject
    else
      super
    end
  end
  def self.prepended(base)
    Object.const_set("NullObject", Class.new)
    (base.instance_methods(false)).each do |method_name|
      old_method = base.instance_method(method_name)
      self.send(:define_method, method_name) do |*args|
        # return NullObject
        #old_method = base.instance_method(method_name)

        #x = self.send(method_name, args)
        #x = base.send(old_method, args)
        #super_method = old_method.bind(self).(args) #old_method.bind(self).(args)
        if(x.nil?)
          return NullObject
        else
          super_method
        end
      end
    end
    (base.methods - Object.methods).each do |method_name|
      base.class.class_exec do
        define_method(method_name) do
          return NullObject
        end
      end
    end
  end
end
